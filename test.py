from flask import Flask, render_template, request
import mysql
import mysql.connector


def connectToDB():
    # create a connection to the database
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="Arjun$123",
        database="retailstore"
    )
    return conn


def execute_query(str2, db):
    cursor = db.cursor()
    cursor.execute(str2)
    tables = cursor.fetchall()
    for table in tables:
        print(table)
    db.close()


def OLAP():
    while (True):
        print("Select the Below Option for Run Olap Queries")
        print("1) OLAP: Roll Up ")
        print("2) OLAP: Roll Down ")
        print("3) OLAP: What is the total revenue generated by each supplier?")
        print("4) OLAP: Drill Up ")
        print("5 Enter your own query: ")
        print("6) Exit")
        user = int(input("Select a Queries to run: "))
        db = connectToDB()

        query1 = """SELECT MONTH(Expected_Delivry) AS Month, COUNT(DISTINCT Customer_ID) AS Total_Customers
            FROM Orders
            JOIN has_order ON has_order.O_id = Orders.O_id
            GROUP BY Month;
            """

        query2 = """SELECT Pname, SUM(quantity) AS Total_Sales
            FROM product
            JOIN has ON has.product_id = product.P_id
            GROUP BY Pname
            ORDER BY Total_Sales DESC
            LIMIT 10;"""

        query3 = """SELECT Category_Name, SUM(Price*quantity*(100-Offer)/100) AS Revenue
            FROM Category
            JOIN chooses ON chooses.category_id = Category.Cid
            JOIN product ON product.P_id = chooses.product_id
            GROUP BY Category_Name
            ORDER BY Revenue DESC;"""

        query4 = """SELECT Sname, SUM(Price*quantity*(100-Offer)/100) AS Revenue
            FROM Supplier
            JOIN has_product ON has_product.Supplier_ID = Supplier.S_id
            JOIN product ON product.P_id = has_product.product_id
            JOIN chooses ON chooses.product_id = product.P_id
            GROUP BY Sname
            ORDER BY Revenue DESC;"""

        query5 = """SELECT Customer_ID, COUNT(DISTINCT category_id) AS Total_Categories
            FROM chooses
            JOIN has ON has.product_id = chooses.product_id
            GROUP BY Customer_ID
            HAVING Total_Categories > 1;"""

        if user == 1:
            execute_query(query1, db)

        elif user == 2:
            execute_query(query2, db)

        elif user == 3:
            execute_query(query3, db)

        elif user == 4:
            execute_query(query4, db)

        elif user == 5:
            str1 = input("""\n Enter the query: """)
            execute_query(str1, db)
            print("Query Successful Executed\n")

        elif user == 6:
            break
        else:
            print("Invalid Option, Try Again")


def triggers():
    while True:
        print("Select the Below Option for Run Triggers")
        print("1) Trigger 1")
        print("2) Trigger 2")
        print("3) Trigger 3")
        print("4) Exit")

        user = int(input("Select a Queries to run: "))
        db = connectToDB()

        trig1 = """CREATE TRIGGER add_user_trigger 
        AFTER INSERT ON customer 
        FOR EACH ROW 
        INSERT INTO account (Username, Password) VALUES (NEW.customer_email, NEW.password);"""

        trig2 = """CREATE TRIGGER delete_user_trigger 
        AFTER DELETE ON customer 
        FOR EACH ROW 
        DELETE FROM account WHERE Username = OLD.customer_email;"""

        trig3 = """CREATE TRIGGER update_user_email_trigger 
        AFTER UPDATE ON customer 
        FOR EACH ROW 
        UPDATE account SET Username = NEW.customer_email WHERE Username = OLD.customer_email;"""

        if user == 1:
            execute_query(trig1, db)
            print("Trigger Successful Executed\n")

        elif user == 2:
            execute_query(trig2, db)
            print("Trigger Successful Executed\n")

        elif user == 3:
            execute_query(trig3, db)
            print("Trigger Successful Executed\n")

        elif user == 4:
            break
        else:
            print("Invalid Option, Try Again")
OLAP()
# triggers()
# SELECT c.Customer_ID, c.customer_name, COUNT(o.O_id) AS total_orders FROM customer c JOIN has_order o ON c.Customer_ID = o.Customer_ID;

"""CREATE TRIGGER delete_user_trigger AFTER DELETE ON customer FOR EACH ROW DELETE FROM account WHERE Username = OLD.customer_email;"""
"""CREATE TRIGGER update_user_email_trigger AFTER UPDATE ON customer FOR EACH ROW UPDATE account SET Username = NEW.customer_email WHERE Username = OLD.customer_email;"""
# CREATE TRIGGER update_order_total AFTER INSERT ON has_order FOR EACH ROW UPDATE Orders SET Order_Total = (SELECT SUM(Price * quantity) FROM has WHERE Customer_ID = NEW.Customer_ID) WHERE O_id = NEW.O_id;